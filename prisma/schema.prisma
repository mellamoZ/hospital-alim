generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointment {
  appointment_id     Int       @id @default(autoincrement())
  full_name          String    @db.VarChar(25)
  phone_number       String    @db.VarChar(25)
  doctor_id          Int?
  appointment_reason String?   @db.Text
  updated_at         DateTime? @default(now()) @db.Timestamp(0)
  created_at         DateTime  @default(now()) @db.Timestamp(0)
  doctor             doctor?   @relation(fields: [doctor_id], references: [doctor_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_appointment_doctor")

  @@index([doctor_id], map: "fk_appointment_doctor")
}

model department {
  department_id   Int      @id @default(autoincrement())
  department_name String   @db.VarChar(25)
  image_url       String?  @db.VarChar(255)
  description     String?  @db.Text
  doctor          doctor[]
  user            user[]
  ward            ward[]
}

model doctor {
  doctor_id      Int           @id @default(autoincrement())
  department_id  Int?
  doctor_name    String        @db.VarChar(25)
  email          String?       @unique(map: "email") @db.VarChar(25)
  phone_number   String        @unique(map: "phone_number") @db.VarChar(25)
  specialization String        @db.VarChar(25)
  description    String        @db.Text
  photo_url      String        @db.VarChar(255)
  create_at      DateTime      @default(now()) @db.Timestamp(0)
  appointment    appointment[]
  department     department?   @relation(fields: [department_id], references: [department_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_doctor_department")
}

model feedback {
  feedback_id  Int     @id @default(autoincrement())
  full_name    String  @db.VarChar(25)
  phone_number String  @db.VarChar(25)
  email        String? @db.VarChar(25)
  comment      String? @db.Text
}

model user {
  user_id       Int         @id @default(autoincrement())
  department_id Int?
  user_name     String      @unique(map: "user_name") @db.VarChar(25)
  full_name     String      @db.VarChar(50)
  password      String      @db.VarChar(255)
  phone_number  String      @unique(map: "phone_number") @db.VarChar(25)
  role          user_role
  create_at     DateTime    @default(now()) @db.Timestamp(0)
  email         String?     @unique(map: "email") @db.VarChar(50)
  department    department? @relation(fields: [department_id], references: [department_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_user_department")
}

model ward {
  ward_id       Int         @id @default(autoincrement())
  department_id Int?
  ward_name     String      @db.VarChar(25)
  image_url     String?     @db.VarChar(255)
  description   String      @db.Text
  department    department? @relation(fields: [department_id], references: [department_id], onDelete: Restrict, onUpdate: Restrict, map: "fk_ward_department")
}

model general_news {
  general_news_id Int      @id @default(autoincrement())
  fb_url          String   @db.Text
  date            DateTime @default(now()) @db.Timestamp(0)
}

model clinical_news {
  clinical_news_id Int      @id @default(autoincrement())
  image            String?  @db.Text
  title            String   @db.VarChar(255)
  body             String   @db.Text
  date             DateTime @default(now()) @db.Timestamp(0)
}

enum user_role {
  admin
  department_manager
  appointment_manager
}
